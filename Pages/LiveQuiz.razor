@page "/livequiz"
@using Microsoft.AspNetCore.SignalR.Client
@using Gamification.Models;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>










@code {
            private HubConnection? hubConnection;
            private List<string> messages = new List<string>();
            private string? userInput;
            private string? messageInput;

            private bool QuizActive;
            private Question CurrentQuestion;

            private LiveQuiz()
            {
                QuizActive = false;
            }



            protected override async Task OnInitializedAsync()
            {
                hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                    .Build();

                hubConnection.On("Start", () =>
                {
                    QuizActive = true;
                    InvokeAsync(StateHasChanged);
                });

                hubConnection.On("End", () =>
                {
                    QuizActive = false;
                    InvokeAsync(StateHasChanged);
                });

                hubConnection.On<string, string, List<string>, List<string>, int>("Question", (title, description, answerTypeList, answerValueList, timeToAnswer) =>
                {
                @*CurrentQuestion = new Question(
                    {
                    Id = 0,
                    Title = title,
                    Description = description,
                    TimeToAnswer = timeToAnswer,
                    SequenceNumber = 0 }
                );*@

                InvokeAsync(StateHasChanged);
            });

        hubConnection.On<string, string>("Correction", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });


        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
        messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
    });

    await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}