@page "/livequiz"
@using Microsoft.AspNetCore.SignalR.Client
@using Gamification.Models;
@using Gamification.Hubs;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>




@if (!QuizActive)
{
    <h3>
        Live quiz


        <button class="btn btn-primary" style="float: right">Start</button>
    </h3>

    <input @bind="groupInput" placeholder="Voer een groepsnaam in..." />
    <input @bind="userInput" placeholder="Voer een gebruikersnaam in..." />

}
else if (QuizEnd)
{

}
else
{

}



@code {
    private HubConnection? hubConnection;
    private QuizHub quizHub;
    private List<string> messages = new List<string>();
    private string? groupInput;
    private string? userInput;
    private string? messageInput;

    private bool QuizActive;
    private bool QuizEnd;
    private Question CurrentQuestion;





    protected override async Task OnInitializedAsync()
    {
        QuizActive = false;

        quizHub = new QuizHub();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On("Start", () =>
        {
            QuizActive = true;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("End", () =>
        {
            QuizActive = false;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, List<string>, List<string>, int>("Question", (title, description, answerTypeList, answerValueList, timeToAnswer) =>
        {
        @*CurrentQuestion = new Question(
                {
                Id = 0,
                Title = title,
                Description = description,
                TimeToAnswer = timeToAnswer,
                SequenceNumber = 0 }
            );*@

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("Correction", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });


        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        StateHasChanged();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }


    private async Task Join()
    {
        if (hubConnection is not null)
        {
            if(!String.IsNullOrEmpty(userInput) && !String.IsNullOrEmpty(groupInput))
            {
                await quizHub.AddToGroup(groupInput, userInput);
            }
        }
    }



    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}